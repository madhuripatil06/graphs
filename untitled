// var graphs = {
// 	Edge : function(edgeName , source , destination , weight){
// 		var edge = {};
// 		edge.name = edgeName;
// 		edge.source = source;
// 		edge.destination = destination;
// 		edge.weight = weight;
// 		return edge;
// 	}
// };

// graphs.WeightedGraph = function(){
// 	this.graph = this.graph || [];
// };

// graphs.WeightedGraph.prototype = {
// 	addVertex : function(vertex){
// 		this.graph[vertex] = this.graph[vertex] || {};
// 	},

// 	addEdge : function(edge){
// 		this.graph[edge.source] = this.graph[edge.source] || {};
// 		this.graph[edge.source][edge.destination] = this.graph[edge.source][edge.destination] || {};
// 		this.graph[edge.source][edge.destination] = edge; 
// 	},

// 	shortestPath : function(from , to ,visited , all_paths){
// 		var visited = visited || [];
// 		var all_paths = all_paths || [];
// 		if(from == to)
// 			return visited.concat(this.graph[from]);
// 		var adjVertex = Object.keys(this.graph[from]);
// 		for( var i = 0 ; i < adjVertex.length ; i ++){
// 			var vertex = adjVertex[i];
// 			if(visited.indexOf(vertex) == -1){
// 				var path = this.shortestPath(vertex , to , visited.concat(this.graph[from]) , all_paths);
// 				console.log(path)
// 				if(path[path.length - 1] == to)
// 					all_paths.push(path);
// 			}
// 		};
// 		for(var i = 0 ; i < all_paths.length ; i++){
			
// 		}
// 		// var shortest = all_paths[0];
// 		// for(var i = 1 ; i < all_paths.length ; i++){
// 		// 	if(shortest.length < all_paths[i].length)
// 		// 		shortest = all_paths[i];
// 		// };
// 		console.log(all_paths)
// 		return shortest;
// 	}
// };

// module.exports = graphs;






shortestPath :  function(head , tail , visited , path){
		var visited = visited || [];
		var path = path || [];
		var no_of_edges = Object.keys(this.graph[head]);
		for(var i = 0 ; i < no_of_edges.length ; i++){
			var path = this.graph[head][no_of_edges[i]];
			if(path[0].tail == tail && this.isShortest(path[0])){
				console.log('is in if' ,path)
				return path;
			}
		}
		// return path;
	}







	isShortest : function(edge){
		var all_edges = Object.keys(this.graph[edge.head]);
		if(all_edges.length == 1) return true;
		for(var i = 0 ; i < all_edges.length ; i++){
			var currEdge =  this.graph[edge.head][all_edges[i]];
			if(currEdge.weight < edge.weight && currEdge[0].tail!= edge.tail)
				return true;
		};
		return false;
	},